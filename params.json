{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Asteroid","tagline":"Yii Extension: Quickly Add Dynamic Content Without Writing JS Or Additional Actions!","body":"Asteroid\r\n========\r\n\r\nYii Extension: Quickly Add Dynamic Content Without Writing JS Or Additional Actions! Quickly bind JQuery events and much more…\r\n\r\n## Requirements\r\n1. Yii 1.8 or above\r\n2. PHP 5.3 or above\r\n\r\n## Installation\r\n1. Place the Asteroid directory in protected/extensions\r\n2. In your desired Controller Class add the Asteroid behavior like so:\r\n\r\n```php\r\nclass MyController extends Controller\r\n{\r\n\tpublic function behaviors() {\r\n\t\treturn array('EAsteroid' => array('class'=>'ext.Asteroid.behaviors.EAsteroid'));\r\n\t}\r\n…\r\n}\r\n```\r\n\r\n## Examples\r\nFor purposes of the following examples we will assume we have the below controller and views:\r\n\r\n####<a name=\"sampleController\"/>SampleController.php</a>\r\n```php\r\nclass sampleController extends Controller\r\n{\r\n\tpublic function behaviors() {\r\n\t\treturn array('EAsteroid' => array('class'=>'ext.Asteroid.behaviors.EAsteroid'));\r\n\t}\r\n\t…\r\n\t\t\r\n\tpublic function actionTestUI()\r\n\t{\r\n\t\t…\r\n\t\t$this->render('test');\r\n\t}\r\n\t\t\r\n\t\t…\r\n}\r\n```\r\n\r\n####<a name=\"indexView\"/>index.php</a>\r\n```html\r\n\t<div id=\"clickMe\">Click Here</div>\r\n\t\r\n\t<div id=\"myDiv1\">\r\n\t\r\n\t</div>\r\n\t\r\n\t<div id=\"myDiv2\">\r\n\t\r\n\t</div>\r\n\t\r\n\t<div id=\"myDiv3\">\r\n\t\r\n\t</div>\r\n```\r\n\r\n####<a name=\"_p1\"/>_p1.php</a>\r\n```html\r\n\t<h1><?php echo $var1; ?></h1>\r\n\t<h2><?php echo $var2; ?></h1>\r\n```\r\n\r\n####<a name=\"_p2\"/>_p2.php</a>\r\n```html\r\n\t<h1><?php echo $var3; ?></h1>\r\n\t<h2><?php echo $var4; ?></h1>\r\n```\r\n\r\n####<a name=\"_p3GridView\"/>_p3GridView.php</a>\r\n```html\r\n<?php $this->widget('zii.widgets.grid.CGridView', array(\r\n\t'id'=>'airport-grid',\r\n\t'dataProvider'=>$model->search(),\r\n\t'filter'=>$model,\r\n\t'columns'=>array(\r\n\t\t'id',\r\n    \t'sample_code',\r\n    \t'name',\r\n\t\tarray(\r\n\t\t\t'class'=>'CButtonColumn',\r\n\t\t),\r\n\t),\r\n)); ?>\r\n```\r\n\r\n\r\n###<a name=\"_example1\"/>Example 1:</a> Using replace() append() And prepend()\r\nLets say we want to dynamically load the content of the partial view _p1.php into the div \"#myDiv1\" of test view.\r\n```php\r\npublic function actionTestUI()\r\n{\r\n\t$this->asteroid('a1')\r\n\t\t\t->replace('#myDiv1', '_p1', function(){ return array('var1'=>'Yeah!', 'var2'=>'Thats right!'); })\r\n\t->orbit();\r\n\t\r\n\t$this->render('test');\r\n}\r\n```\r\n\r\n\r\nNow lets say we have the same scenario but we would also like to append some content to the div \"#myDiv2\"\r\n```php\r\npublic function actionTestUI()\r\n{\r\n\t$this->asteroid('a1')\r\n\t\t\t->replace('#myDiv1', '_p1', function(){ return array('var1'=>'Yeah!', 'var2'=>'Thats right!'); })\r\n\t\t ->asteroid('a2')\r\n\t\t \t->append('#myDive2', '_p2', function(){ return array('var3'=>'Im Here!', 'var4'=>'You know it!'); })\r\n\t->orbit();\r\n\t\r\n\t$this->render('test');\r\n}\r\n```\r\n\r\nWe could also have chosen to prepend \r\n```php\r\npublic function actionTestUI()\r\n{\r\n\t$this->asteroid('a1')\r\n\t\t\t->replace('#myDiv1', '_p1', function(){ return array('var1'=>'Yeah!', 'var2'=>'Thats right!'); })\r\n\t\t ->asteroid('a2')\r\n\t\t \t->prepend('#myDive2', '_p2', function(){ return array('var3'=>'Im Here!', 'var4'=>'You know it!'); })\r\n\t->orbit();\r\n\t\r\n\t$this->render('test');\r\n}\r\n```\r\n\r\n\r\n###<a name=\"_example2\"/>Example 2:</a> Dynamically Rendering An Yii Grid View\r\nWhen your partial contains a widget like CGridView that registers scripts and or style sheets to POS_HEAD you should use this approach.\r\n```php\r\npublic function actionTestUI()\r\n{\r\n\t$this->asteroid('a1')\r\n\t\t\t->renderMethod('render')\r\n\t\t\t->replace('#myDiv3', '_p3GridView',  function() { \r\n\t\t\t\t$sample = new Sample(); \r\n\t\t\t\tif(isset($_GET['Sample'])) $sample>attributes = $_GET['Sample']; \r\n\t\t\t\treturn array('model' => $sample); \r\n\t\t\t  })\r\n\t->orbit();\r\n\t\r\n\t$this->render('test');\r\n}\r\n```\r\n\r\n\r\n###<a name=\"_example2\"/>Exmaple 3:</a> Using onEvent()\r\nLets say we want to replace the content of div \"#myDiv1\" with the partial _p1.php when I click the div \"#clickMe\" \r\n\r\n```php\r\npublic function actionTestUI()\r\n{\r\n\r\n\t$this->Asteroid('a3')->onEvent('click', '#clickMe')\t\r\n\t\t\t->replace('#myDiv1', '_p1', function() { return array('var1'=>'Yeah!', 'var2'=>'You clicked me…'); })\r\n\t->orbit();\r\n\r\n\t$this->render('test');\r\n}\r\n```\r\n\r\nNow lets say we want to execute some additional JavaScript on our click event.\r\n```php\r\npublic function actionTestUI()\r\n{\r\n\t$this->Asteroid('a3')->onEvent('click', '#clickMe')\t\r\n\t\t\t->execJs(\"alert('I know you would click');\")\r\n\t\t\t->replace('#myDiv1', '_p1', function() { return array('var1'=>'Yeah!', 'var2'=>'You clicked me…'); })\r\n\t->orbit();\r\n\r\n\t$this->render('test');\r\n}\r\n```\r\n\r\n##API\r\n###Public Methods\r\n| Method  | Description  |\r\n|---------------|----------------|\r\n| [Asteroid](#methodAsteroid)    |   Initilizes Asteroid for the $id passed. $id should be unique unless you intend to overwrite an existing Asteroid. Example: `Asteroid('block1')`.  |\r\n| [onEvent](#methodOnEvent)    |   Sets a custom event listener. Example: `onEvent('click', '#someDomID')`; The default is 'load', 'body'. |\r\n| [renderMethod](#methodRenderMethod)  | Sets the Yii render type for your Asteroid. `renderPartial` is the default. Generally you only need to use pass 'render' if you are using Yii widgets like Grid View. |\r\n| [append](#methodAppend)  | Tells JS to dynamically load the specified view and append it to the specified DOM element. |\r\n| [prepend](#methodPrepend)  | Same as `append` but prepends to DOM element content.  |\r\n| [replace](#methodReplace)  | Same as `append` but replaces DOM element content.  |\r\n| [execJS](#methodExecJS)  | Call this method to add arbitrary JavaScript. Takes String $js of valid JavaScript. `execJS('alert(\"Yeah!\");')`  |\r\n| [orbit](#methodOrbit)  | Renders all JS and CSS dependencies. You must Call `orbit()` as the very last step after all comets have been initialized with Asteroid('id');  |\r\n\r\n###Method Details\r\n\r\n#####<a name=\"methodAsteroid\"/> Asteroid</a>\r\n\r\n|Method Info|\r\n|---------------|\r\n| ```public object Asteroid(string $id)```   |\r\n|Initilizes Asteroid for the $id passed. $id should be unique unless you intend to overwrite an existing Asteroid. **All Asteroids must start with this method**|\r\n\r\n\r\n|  Param |  Type | Description |\r\n|---------------|----------------|----------------|\r\n| $id  | String  | Unique Identifier for this Asteroid event |\r\n\r\n\r\n#####<a name=\"methodOnEvent\"/> onEvent</a>\r\n|Method Info|\r\n|---------------|\r\n| ```public object onEvent(string $event, string $selector)```   |\r\n|Sets a custom event listener. The default is 'load', 'body' and you only need to call this method if you intend to do somthing other then the default.|\r\n\r\n\r\n|  Param |  Type | Description |\r\n|---------------|----------------|----------------|\r\n| $event  | String  | Tells Asteroid which JQuery event to listen for. List of possible $event values:<br/> \"click\", \"blur\", \"focus\", \"focusin\", \"focusout\", \"load\", \"resize\", \"scroll\", \"unload\", \"dblclick\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"mouseenter\", \"mouseleave\", \"change\", \"select\", \"submit\", \"keydown\", \"keypress\", \"keyup\", \"error\" |\r\n| $selector | String  | Tells Asteroid which DOM object(s) to attach the listener to. |\r\n\r\n####<a name=\"methodRenderMethod\"/> renderMethod</a>\r\n|Method Info|\r\n|---------------|\r\n| ```public object renderMethod(string $type='renderPartial', string $viewTemplate=null)```   |\r\n| Sets the Yii render type for your Asteroid. `renderPartial` is the default. Only call this method if you need an Yii render type of 'render'. |\r\n\r\n|  Param |  Type | Description |\r\n|---------------|----------------|----------------|\r\n| $type  | String  | Tells Asteroid which Yii render type to use. Default is 'renderPartial'. Should be set to 'render' when using widgets that register scripts or style sheets to POS_HEAD. |\r\n| $viewTemplate  | String  | Tells Asteroid which view template to use for render. Optional and should only be used when $renderType is set to 'render'. The template used for type render is ext.Asteroid.views.clean |\r\n\r\n\r\n####<a name=\"methodAppend\"/> append</a>\r\n|Method Info|\r\n|---------------|\r\n| ```public object append(string $selector, string $view, closure $data)``` |\r\n|Tells your Asteroid to dynamically load the Yii view $view ($this->renderPartial($view, $data()) and append it to the Dom Element(s) specified by $selector.|\r\n\r\n|  Param |  Type | Description |\r\n|---------------|----------------|----------------|\r\n| $selector  | String  | JQuery Dom selector ie '#someDomID' |\r\n| $view | String | Yii view file ie \"_someView\" |\r\n| $data | Closure | Closure must return an associative array. This array is passed to the $view like so: ($this->renderPartial($view, $data())|\r\n\r\n\r\n####<a name=\"methodPrepend\"/> prepend</a>\r\n|Method Info|\r\n|---------------|\r\n| ```public object prepend(string $selector, string $view, closure $data)``` |\r\n|Tells your Asteroid to dynamically load the Yii view $view ($this->renderPartial($view, $data()) and prepend it to the Dom Element(s) specified by $selector.|\r\n\r\n|  Param |  Type | Description |\r\n|---------------|----------------|----------------|\r\n| $selector  | String  | JQuery Dom selector ie '#someDomID' |\r\n| $view | String | Yii view file ie \"_someView\" |\r\n| $data | Closure | Closure must return an associative array. This array is passed to the $view like so: ($this->renderPartial($view, $data())|\r\n\r\n####<a name=\"methodReplace\"/> replace</a>\r\n|Method Info|\r\n|---------------|\r\n| ```public object replace(string $selector, string $view, closure $data)``` |\r\n|Tells your Asteroid to dynamically load the Yii view $view ($this->renderPartial($view, $data()) and replace the content of the Dom Element(s) specified by $selector.|\r\n\r\n|  Param |  Type | Description |\r\n|---------------|----------------|----------------|\r\n| $selector  | String  | JQuery Dom selector ie '#someDomID' |\r\n| $view | String | Yii view file ie \"_someView\" |\r\n| $data | Closure | Closure must return an associative array. This array is passed to the $view like so: ($this->renderPartial($view, $data())|\r\n\r\n\r\n####<a name=\"methodExecJS\"/> execJS</a>\r\n|Method Info|\r\n|---------------|\r\n| ```public object execJS(string $js)``` |\r\n| Call this method to add arbitrary JavaScript. Takes String $js of valid JavaScript. execJS('alert(\"Yeah!\");'). You should only calls this method if you need to execute addtional JS not provided by Asteroid |\r\n\r\n|  Param |  Type | Description |\r\n|---------------|----------------|----------------|\r\n| $js  | String  | Valid Javascript |\r\n\r\n####<a name=\"methodOrbit\"/> orbit</a>\r\n|Method Info|\r\n|---------------|\r\n| ```public orbit()``` |\r\n| Renders all JS and CSS dependencies. You must Call orbit() as the very last step after all comets have been initialized with Asteroid('id'); |\r\n\r\n\t\t\t\t\t"}